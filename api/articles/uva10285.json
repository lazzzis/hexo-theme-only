{"title":"UVa10285 - Longest Run on a Snowboard","slug":"uva10285","date":"2015-11-29T02:22:47.000Z","updated":"2017-07-30T05:48:51.000Z","comments":true,"excerpt":"","content":"<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>假设从( x, y )出发，并且从( x, y )出发所能走的最长路为 d[x][y]，那么设想如果( x  - 1, y )的值（即题目所给的高度）要小于(x，y)，那么d[x-1][y] + 1 有可能就是我们所要求的d[x][y]，因为这条路是单向的，只可能从较小的(x-1， y)走向(x，y)。如果考虑四个方向，用(x’， y’)表示(x ， y)上下左右四个方向，那么d[x][y] = max(d[x’][y’]) + 1，且 (x’, y’)上的值要小于(x, y)。那么从这个方程可以看出这实际上可以采用 DFS 加上 dp 的做法，或者称之为记忆化搜索。而 搜索 的终点则是某点(x, y)的四周都比他大，则返回 1。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n    <pre><code class=\"lang-cpp\"><span class=\"hljs-comment\">/*\n * AC @ Nov 26th 2015\n * Run Time : 0.003s\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> LL;\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> uLL;\n<span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>&gt; pr_int;\n\n<span class=\"hljs-keyword\">int</span> dir[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">2</span>] = {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">0</span>};\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> MAXN = <span class=\"hljs-number\">100</span> + <span class=\"hljs-number\">40</span>;\n<span class=\"hljs-keyword\">int</span> height[MAXN][MAXN], d[MAXN][MAXN];\n<span class=\"hljs-built_in\">string</span> name;\n<span class=\"hljs-keyword\">int</span> rows, cols;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">read</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">cin</span> &gt;&gt; name &gt;&gt; rows &gt;&gt; cols;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; rows; ++i) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; cols; ++j) {\n            <span class=\"hljs-built_in\">cin</span> &gt;&gt; height[i][j];\n        }\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">dp</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> y)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (d[x][y] != <span class=\"hljs-number\">-1</span>) {\n        <span class=\"hljs-keyword\">return</span> d[x][y];\n    }\n    <span class=\"hljs-keyword\">int</span> ans = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">4</span>; ++ i) {\n        <span class=\"hljs-keyword\">int</span> nx = x + dir[i][<span class=\"hljs-number\">0</span>], ny = y + dir[i][<span class=\"hljs-number\">1</span>];\n        <span class=\"hljs-comment\">//cout &lt;&lt; nx &lt;&lt; \" : \" &lt;&lt; ny  &lt;&lt; \" \" &lt;&lt; height[x][y] &lt;&lt; \" \" &lt;&lt; height[nx][ny] &lt;&lt; endl;</span>\n        <span class=\"hljs-keyword\">if</span> (nx &gt;=<span class=\"hljs-number\">0</span> &amp;&amp; nx &lt; rows &amp;&amp; ny &gt;=<span class=\"hljs-number\">0</span> &amp;&amp; ny &lt; cols &amp;&amp; height[x][y] &gt; height[nx][ny]) {\n            ans = max(dp(nx, ny) + <span class=\"hljs-number\">1</span>, ans);\n        }\n    }\n    <span class=\"hljs-comment\">//cout &lt;&lt; x &lt;&lt; \" \" &lt;&lt; y &lt;&lt; endl;</span>\n    <span class=\"hljs-keyword\">return</span> d[x][y] = ans;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    ios::sync_with_stdio(<span class=\"hljs-literal\">false</span>);\n    <span class=\"hljs-built_in\">cin</span>.tie(<span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">int</span> T;\n    <span class=\"hljs-built_in\">cin</span> &gt;&gt; T;\n    <span class=\"hljs-keyword\">while</span>(T --) {\n        read();\n        <span class=\"hljs-keyword\">int</span> ans = <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-built_in\">memset</span>(d, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-keyword\">sizeof</span>(d));\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; rows; ++ i) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; cols; ++ j) {\n                ans = max(ans, dp(i, j));\n            }\n        }\n        <span class=\"hljs-built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"hljs-string\">\": \"</span> &lt;&lt; ans &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n","categories":[{"name":"ACM","path":"api/categories/ACM.json"}],"tags":[{"name":"ACM","path":"api/tags/ACM.json"},{"name":"UVaOJ","path":"api/tags/UVaOJ.json"}]}