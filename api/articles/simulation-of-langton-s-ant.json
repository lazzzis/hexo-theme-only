{"title":"simulation of langton's ant","slug":"simulation-of-langton-s-ant","date":"2015-10-19T10:06:12.000Z","updated":"2017-07-30T05:48:51.000Z","comments":true,"excerpt":"","content":"<h2 id=\"Introduction-to-Langton’s-Ant\"><a href=\"#Introduction-to-Langton’s-Ant\" class=\"headerlink\" title=\"Introduction to Langton’s Ant\"></a>Introduction to Langton’s Ant</h2><p>简单来说 Langton’s ant 就是一个简单的数学游戏.</p>\n<p>在一平面上，存在无限的等大小的正方形方格，每一个方格要么是白色，要么是黑色. 我们在某一个上放了一只蚂蚁（Ant）. 这只蚂蚁每一步可以朝四个方向行走，并且每步行走遵从以下两条规则:</p>\n<ul>\n<li>如果蚂蚁在<strong>白</strong>色格子时，就会向<strong>右</strong>转90°，同时颠倒该格子的颜色（变为黑色），最后再向前走一步。</li>\n<li>如果蚂蚁在<strong>黑</strong>色格子时，就会向<strong>左</strong>转90°，同时颠倒该格子的颜色（变为白色），最后再向前走一步。</li>\n</ul>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/0/09/LangtonsAntAnimated.gif\" alt=\"\"></p>\n<p>更多参考资料 : <a href=\"https://en.wikipedia.org/wiki/Langton%27s_ant\" target=\"_blank\" rel=\"external\">wikipedia - Langton’s ant</a> or <a href=\"https://www.youtube.com/watch?v=NWBToaXK5T0\" target=\"_blank\" rel=\"external\">Youtube - Langton’s Ant - Numberphile</a></p>\n<h2 id=\"Analazation\"><a href=\"#Analazation\" class=\"headerlink\" title=\"Analazation\"></a>Analazation</h2><p>从介绍中可以看出，有两样是必备的：</p>\n<ul>\n<li>Ant。也就是移动的蚂蚁</li>\n<li>Grids。也就是网格。</li>\n</ul>\n<p>所以接下来从这两方面分别入手：<br></p>\n<h3 id=\"Ant\"><a href=\"#Ant\" class=\"headerlink\" title=\"Ant\"></a>Ant</h3><p>蚂蚁负责移动，而移动的方向如果用东南西北<code>(NEWS)</code>表示的话，那么要涉及它的朝向问题。即：当它的朝向是向南时，那么它的右转实际是用西转。所以可以设计两个函数<code>turn_left()</code>和<code>turn_right()</code>。函数可以改变蚂蚁的位置，作出正确的左转和右转。<br>接下来是如何让它自动按规矩走。为了不影响程序的运行，我决定使用多线程。使用多线程的好处之一就是如果需要多只蚂蚁移动时，只需要轻松地启动几个线程就好了。所以蚂蚁类应该扩充<code>Runnable</code>接口。每一步行走时获取当前格的颜色，并进行修改。</p>\n<h3 id=\"Grids\"><a href=\"#Grids\" class=\"headerlink\" title=\"Grids\"></a>Grids</h3><p>首先很明显我可以用一个网格布局来管理每一个小网格，如 <code>GridLayout(100, 100)</code> 即 <code>100 X 100 </code>的网格布局。接下来需要用一个控件来表示小网格。每一个网格需要变换颜色，所以这个用作网格的控件就首先必须要有一个可以改变颜色的方法。要使用 JPanel 么？ JPanel确实可以变换颜色，但是实际测试就会发现一个问题，每一个小网格之间没有边界线，整个网格看上去就像一张白纸一样。JButton如何？JButton也有一个改变颜色的方法 <code>setBackground()</code>。而且在网格布局时，每一个JButton和JButton之间有一个明显的分界线，可以很明显地看出是一个100 * 100 的网格布局，显示效果比用JPanel要好。就这样决定了，使用JButton表示每一个小网格。<br>除此之外，为了方便蚂蚁获取颜色和修改颜色，编写两个方法：<code>getColor(int x, int y)</code> <code>setColor(int x, int y)</code> 供蚂蚁查询和修改 (x, y) 位置的颜色。</p>\n<h2 id=\"Coding\"><a href=\"#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2><p>我的项目地址 : <a href=\"https://github.com/lazzzis/Langton-s-Ant-Java\" target=\"_blank\" rel=\"external\">Langton-s-Ant-Java</a><br>这里不展示所有的代码，只写一些我认为关键的部分。</p>\n<h3 id=\"Ant-部分：\"><a href=\"#Ant-部分：\" class=\"headerlink\" title=\"Ant 部分：\"></a>Ant 部分：</h3>\n    <pre><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Ant</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Runnable</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> x, y, forward; <span class=\"hljs-comment\">// forward 为朝向</span>\n    <span class=\"hljs-keyword\">private</span> Grids grid = <span class=\"hljs-keyword\">null</span>; <span class=\"hljs-comment\">// 注意此处的 grid 用作引用</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">boolean</span> alive; <span class=\"hljs-comment\">// 判断此蚂蚁是否存活</span>\n\n}\n</code></pre>\n<p>Run()函数部分：</p>\n<ul>\n<li>每次移动时，记录移动前格子的颜色，以便反色。</li>\n<li>同时把移动后的格子变为红色，可以在实际运行时表明蚂蚁的位置，加强交互性。</li>\n<li>stay_idle() 代表延时，可以起到控制蚂蚁速度的作用。</li>\n</ul>\n\n    <pre><code class=\"lang-java\">    public void run() {\n        <span class=\"hljs-comment\">// record the original color of grid[x][y]</span>\n        Color ori_color = <span class=\"hljs-keyword\">grid</span>.getColor(x, y);\n        <span class=\"hljs-keyword\">int</span> old_x, old_y;\n        <span class=\"hljs-keyword\">while</span> (this.alive) {\n            old_x = x;\n            old_y = y;\n            <span class=\"hljs-comment\">// black : turn left</span>\n            <span class=\"hljs-keyword\">if</span> (ori_color == Ant_Util.black ) {\n                <span class=\"hljs-keyword\">grid</span>.setColor(old_x, old_y, Ant_Util.white);\n                this.turn_left();\n                ori_color = <span class=\"hljs-keyword\">grid</span>.getColor(x, y);\n                <span class=\"hljs-keyword\">grid</span>.setColor(x, y, Ant_Util.red);\n            } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-comment\">// white : turn right</span>\n                <span class=\"hljs-keyword\">grid</span>.setColor(old_x, old_y, Ant_Util.black);\n                this.turn_right();\n                ori_color = <span class=\"hljs-keyword\">grid</span>.getColor(x, y);\n                <span class=\"hljs-keyword\">grid</span>.setColor(x, y, Ant_Util.red);\n            }\n            stay_idle();\n        }\n    }\n</code></pre>\n<h3 id=\"Grids-部分：\"><a href=\"#Grids-部分：\" class=\"headerlink\" title=\"Grids 部分：\"></a>Grids 部分：</h3><p>主要就是构造函数，以及上面提到的供Ant调用以得到和改变颜色的函数。<br>简单起见，默认全部为白三色。</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Grids</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Container</span> </span>{\n    <span class=\"hljs-comment\">// every button is a grid</span>\n    <span class=\"hljs-keyword\">private</span> JButton[][] grid = <span class=\"hljs-keyword\">new</span> JButton[Ant_Util.Grid_Height][Ant_Util.Grid_Width];\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Grids</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.setLayout(<span class=\"hljs-keyword\">new</span> GridLayout(Ant_Util.Grid_Height, Ant_Util.Grid_Width));\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; Ant_Util.Grid_Height; ++ i) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j  = <span class=\"hljs-number\">0</span>; j &lt; Ant_Util.Grid_Width; ++ j) {\n                grid[i][j] = <span class=\"hljs-keyword\">new</span> JButton();\n                grid[i][j].setBackground(Ant_Util.white);\n                <span class=\"hljs-keyword\">this</span>.add(grid[i][j]);\n            }\n        }\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Color <span class=\"hljs-title\">getColor</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> y)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> grid[x][y].getBackground();\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setColor</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> y, Color c)</span> </span>{\n        grid[x][y].setBackground(c);\n    }\n}\n</code></pre>\n<h3 id=\"其他部分\"><a href=\"#其他部分\" class=\"headerlink\" title=\"其他部分\"></a>其他部分</h3><ul>\n<li>class App ， 用作主窗口。实例化 Ant 类 以及 Girds 类。</li>\n<li>Class Ant_Util，用作存放常量，比如蚂蚁的速度，网格的数量，窗口的大小等，需要修改时只要在此类里修改更改就好，不用跑到其它类里满地找，而且调用起来也会方便很多。</li>\n</ul>\n","categories":[{"name":"Math","path":"api/categories/Math.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"Math","path":"api/tags/Math.json"}]}