{"title":"sort some list elements into an descreasing ones in js","slug":"list-sort-in-js","date":"2015-11-17T12:35:40.000Z","updated":"2017-07-30T05:48:51.000Z","comments":true,"excerpt":"","content":"<h2 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h2><p>Sort is a prevalent topic in programing. Although the sort operation mostly is handled by the back-end like PHP, Java and so on, occasionaly some are occured in front-end. Here are some simple instances I dealt with recently.</p>\n<h2 id=\"Bubble-like-Sort\"><a href=\"#Bubble-like-Sort\" class=\"headerlink\" title=\"Bubble-like Sort\"></a>Bubble-like Sort</h2><p>Suppose some list elements ordered as follows:</p>\n\n    <pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"demo\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n</code></pre>\n<p>Every time I filter through the nodes to get the smallest-value one from 1st one to 4nd one, and then I put it to the tail of lists. Next, I still filter to get the smallest-value one but from 1st one to 3nd one, and still put it to the tail to the lists. Now, two elements are sorted, and still two ones stay idle. The operation continues until all the elements have been sorted.<br>The produceres can be illustrated as follows:</p>\n<blockquote>\n<p>2 1 4 3 -&gt; 2 4 3 1 -&gt; 4 3 1 2 -&gt; 4 1 2 3 -&gt; 1 2 3 4</p>\n</blockquote>\n<p>The following is my code:</p>\n\n    <pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> ulObj = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'demo'</span>);\n<span class=\"hljs-keyword\">var</span> lists = ulObj.getElementsByTagName(<span class=\"hljs-string\">'li'</span>);\n<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = lists.length - <span class=\"hljs-number\">1</span>; i &gt;=<span class=\"hljs-number\">0</span> ; -- i) {\n    <span class=\"hljs-keyword\">var</span> max_one = lists[i];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = i; j &gt;= <span class=\"hljs-number\">0</span>; -- j) {\n     <span class=\"hljs-comment\">/* A: */</span>   <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">parseInt</span>(lists[j].innerHTML) &gt; <span class=\"hljs-built_in\">parseInt</span>(max_one.innerHTML)) {\n            max_one = lists[j];\n        }\n    }\n    <span class=\"hljs-comment\">// B: ulObj.removeChild(max_one);</span>\n    ulObj.appendChild(max_one);\n}\n</code></pre>\n<p>Pay attention to the part A and B.</p>\n<ul>\n<li>Part A: Due to the type of <code>lists[i].innerHTML</code>, sort order is according to the string Unicode code points. Therefore, <code>parseInt()</code> function is expected!</li>\n<li>Part B: This operation is optional. Because everytime <code>appendChild(node)</code> is invoked, it will remove the node from the orignal parent and then append it to the new parent. So removeChild() function can be dispensable.</li>\n</ul>\n<h2 id=\"Use-Array-sort\"><a href=\"#Use-Array-sort\" class=\"headerlink\" title=\"Use Array.sort()\"></a>Use Array.sort()</h2><p>The first time, I applied the sort() method of Array as following:</p>\n\n    <pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> ulObj = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'demo'</span>);\n<span class=\"hljs-keyword\">var</span> lists = ulObj.getElementsByTagName(<span class=\"hljs-string\">'li'</span>);\nlists.sort();\n</code></pre>\n<p>However these measures are <strong>not accepted</strong>!</p>\n<blockquote>\n<p>A node list may look like an array, but it is not. The node list can be looped through and referred to its nodes like an array. However, Array Methods are forbidden, like valueOf() or join() on the node list.</p>\n</blockquote>\n<p>Therefore, I need to convert the list to a new array as initial. After <code>sort()</code> method, the list elemnts are appended with <code>appendChild()</code> method.</p>\n\n    <pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> ulObj = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'demo'</span>);\n<span class=\"hljs-keyword\">var</span> lists = ulObj.getElementsByTagName(<span class=\"hljs-string\">'li'</span>);\n<span class=\"hljs-keyword\">var</span> listsArr = [];\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = lists.length - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; -- i) {\n    listsArr.push(lists[i]);\n}\nlistsArr.sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a, b</span>) </span>{\n   <span class=\"hljs-comment\">/* A */</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">parseInt</span>(a.innerHTML) - <span class=\"hljs-built_in\">parseInt</span>(b.innerHTML);\n});\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = listsArr.length - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; -- i) {\n    ulObj.appendChild(listsArr[i]);\n}\n</code></pre>\n<p>In part A, there is a custom compareFunctiom to define the sort order. Especially to deserve to be mentioned, elements are sorted by converting them to strings and comparing strings in Unicode point order by defaut.  The <code>parseInt()</code> can still not be erased.</p>\n","categories":[{"name":"Front-end","path":"api/categories/Front-end.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}